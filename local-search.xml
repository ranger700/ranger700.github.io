<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>田忌赛马</title>
    <link href="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/"/>
    <url>/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<p>力扣870，田忌赛马问题，此题可用贪心算法或动态规划解决。</p><h3 id="方法一：贪心算法"><a href="#方法一：贪心算法" class="headerlink" title="方法一：贪心算法"></a>方法一：贪心算法</h3><p>贪心算法又有两种贪心策略，一种是从快到慢的贪心，一种是从慢到快的贪心</p><h4 id="从快到慢"><a href="#从快到慢" class="headerlink" title="从快到慢"></a>从快到慢</h4><p>贪心策略如下</p><img src="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/test1.png" class="" title="图片引用方法一"><p>此题需要保存排序前的元素在数组中的下标，有两种方法，一种是使用哈希表存储元素-下标，考虑到元素存在重复，因此使用队列作为哈希表的value</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span>[] advantageCount(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        Map&lt;<span class="hljs-type">Integer</span>, Deque&lt;<span class="hljs-type">Integer</span>&gt;&gt; map = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums2.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(!map.containsKey(nums2[i]))&#123;<br>                map.put(nums2[i], <span class="hljs-built_in">new</span> LinkedList());<br>            &#125;<br>            map.<span class="hljs-keyword">get</span>(nums2[i]).<span class="hljs-keyword">add</span>(i);<br>        &#125;<br><br>        Arrays.sort(nums1);<br>        Arrays.sort(nums2);<br><br>        <span class="hljs-type">int</span> n = nums1.length;<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br>        <span class="hljs-type">int</span> head = <span class="hljs-number">0</span>; // 指向ret的头<br>        <span class="hljs-type">int</span> tail = n - <span class="hljs-number">1</span>; // 指向ret的尾<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; // nums2的下标<br>        <span class="hljs-keyword">while</span>(head &lt; n)&#123;<br>            <span class="hljs-keyword">if</span>(nums1[head] &gt; nums2[i])&#123;<br>                <span class="hljs-type">Integer</span> <span class="hljs-keyword">index</span> = map.<span class="hljs-keyword">get</span>(nums2[i]).poll();<br>                ret[<span class="hljs-keyword">index</span>] = nums1[head++];<br>                i++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">Integer</span> <span class="hljs-keyword">index</span> = map.<span class="hljs-keyword">get</span>(nums2[tail]).poll();<br>            ret[<span class="hljs-keyword">index</span>] = nums1[head++];<br>            tail<span class="hljs-comment">--;</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种方法是使用下标数组，排序的compare使用值的大小，而排序的结果作用在下标数组上，使得下标数组的第一个位置记录最大元素的下标，以此类推。中间要重写sort函数的comparator接口，可以使用lambda表达式</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs inform7">class Solution &#123;<br>    public static int<span class="hljs-comment">[]</span> advantageCount(int<span class="hljs-comment">[]</span> nums1, int<span class="hljs-comment">[]</span> nums2) &#123;<br>        int n=nums1.length;<br>        Integer<span class="hljs-comment">[]</span> index2 = new Integer<span class="hljs-comment">[n]</span>;<br>        for(int i=0;i&lt;n;i++)&#123;<br>            index2<span class="hljs-comment">[i]</span>=i;<br>        &#125;<br>        //对nums2从大到小排序，下标数组的第一个位置保存nums2最大的数的下标<br>        Arrays.sort(nums1);<br>        for(int i=0;i&lt;n/2;i++)&#123;<br>            int temp=nums1<span class="hljs-comment">[i]</span>;<br>            nums1<span class="hljs-comment">[i]</span>=nums1<span class="hljs-comment">[n-1-i]</span>;<br>            nums1<span class="hljs-comment">[n-1-i]</span>=temp;<br>        &#125;<br>        Arrays.sort(index2,new Comparator&lt;Integer&gt;() &#123;<br>            @Override<br>            public int compare(Integer i, Integer j) &#123;<br>                return nums2<span class="hljs-comment">[j]</span> - nums2<span class="hljs-comment">[i]</span>;<br>            &#125;<br>        &#125;);<br>        //若使用lambda表达式则如下<br>        //Arrays.sort(index2,(i,j)-&gt;&#123;nums2<span class="hljs-comment">[j]</span>-nums2<span class="hljs-comment">[i]</span>&#125;);<br>        int<span class="hljs-comment">[]</span> ans = new int<span class="hljs-comment">[n]</span>;<br>        int l1=0,r1=n-1;<br>        int r2=n-1;<br>        for(int i=0;i&lt;n;i++)&#123;<br>            //nums1最大的数大于nums2最大的数，则贪心此步最优<br>            if(nums1<span class="hljs-comment">[l1]</span>&gt;nums2<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>)&#123;<br>                //nums1最大数的下标<br>                ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[l1]</span>;<br>                l1++;<br>            &#125;else if(nums1<span class="hljs-comment">[l1]</span>&lt;nums2<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>)&#123;<br>                //小于则用nums1最小数与nums2最大数比较<br>                ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[r1]</span>;<br>                r1--;<br>            &#125;else&#123;<br>                //最大数相等，比较最小数，若最小数大，则比较，否则，拿最小数比<br>                if(nums1<span class="hljs-comment">[r1]</span>&gt;nums2<span class="hljs-comment">[index2<span class="hljs-comment">[r2]</span>]</span>)&#123;<br>                    ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[l1]</span>;<br>                    l1++;<br>                &#125;else&#123;<br>                    ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[r1]</span>;<br>                    r1--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="从慢到快"><a href="#从慢到快" class="headerlink" title="从慢到快"></a>从慢到快</h4><p>贪心策略如下</p><ul><li>田忌的最慢马比齐王的最慢马快，则继续往后</li><li>田忌的最慢马比齐王的最慢马慢，用田忌的最慢马与齐王的最快马比较</li></ul><h3 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h3><img src="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/test2.png" class="" title="图片引用方法一"><img src="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/test3.png" class="" title="图片引用方法一"><p><em><strong>状态转移方程</strong></em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">f<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span>=<span class="hljs-built_in">max</span>(f<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[j]</span>+<span class="hljs-built_in">score</span>(i-j,j),f<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[j-1]</span>+<span class="hljs-built_in">score</span>(n-j+<span class="hljs-number">1</span>,j))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/10/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/10/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/05/hello-world/"/>
    <url>/2022/10/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
