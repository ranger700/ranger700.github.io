<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0-1背包</title>
    <link href="/2023/01/03/0-1%E8%83%8C%E5%8C%85/"/>
    <url>/2023/01/03/0-1%E8%83%8C%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<img src="/2023/01/03/0-1%E8%83%8C%E5%8C%85/p1.png" class="" title="图片引用方法一"><ul><li>dfs</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">class</span> Solution &#123;<br><br>    <span class="hljs-built_in">int</span> ans=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> findTargetSumWays(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> <span class="hljs-keyword">target</span>) &#123;<br>        dfs(nums,<span class="hljs-keyword">target</span>,nums.length,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> void dfs(<span class="hljs-built_in">int</span>[] nums,<span class="hljs-built_in">int</span> <span class="hljs-keyword">target</span>,<span class="hljs-built_in">int</span> n,<span class="hljs-built_in">int</span> depth,<span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>)&#123;<br>        <span class="hljs-keyword">if</span>(depth==n)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sum</span>==<span class="hljs-keyword">target</span>)&#123;<br>                ans++;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        dfs(nums,<span class="hljs-keyword">target</span>,n,depth+<span class="hljs-number">1</span>,<span class="hljs-built_in">sum</span>+nums[depth]);<br>        dfs(nums,<span class="hljs-keyword">target</span>,n,depth+<span class="hljs-number">1</span>,<span class="hljs-built_in">sum</span>-nums[depth]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>time: O(2^n)</p><ul><li>dp</li></ul><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs inform7">class Solution &#123;<br><br>    public int findTargetSumWays(int<span class="hljs-comment">[]</span> nums, int target) &#123;<br>        int sum=0;<br>        int n=nums.length;<br>        for(int num:nums)&#123;<br>            sum+=num;<br>        &#125;<br><br>        if(target&gt;0)&#123;<br>            if(target&gt;sum)&#123;<br>                return 0;<br>            &#125;<br>        &#125;else&#123;<br>            if(target+sum&lt;0)&#123;<br>                return 0;<br>            &#125;<br>        &#125;<br><br>        int t=sum*2+1;<br>        int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> dp=new int<span class="hljs-comment">[n]</span><span class="hljs-comment">[t]</span>;<br>        <br>        //整体加sum，因为数组下标不能为负值，将-sum到sum映射到0到2sum<br>        dp<span class="hljs-comment">[0]</span><span class="hljs-comment">[sum+nums<span class="hljs-comment">[0]</span>]</span>=1;<br>        dp<span class="hljs-comment">[0]</span><span class="hljs-comment">[sum-nums<span class="hljs-comment">[0]</span>]</span>=1;<br>        if(nums<span class="hljs-comment">[0]</span>==0)&#123;<br>            dp<span class="hljs-comment">[0]</span><span class="hljs-comment">[sum]</span>=2;<br>        &#125;<br><br>        // dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j+nums<span class="hljs-comment">[i]</span>]</span>+dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-nums<span class="hljs-comment">[i]</span>]</span><br><br>        for(int i=1;i&lt;n;i++)&#123;<br>            for(int j=-sum;j&lt;=sum;j++)&#123;<br>                if(j+nums<span class="hljs-comment">[i]</span>&gt;sum)&#123;<br>                    dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j+sum]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j+sum-nums<span class="hljs-comment">[i]</span>]</span>;<br>                &#125;else if(j-nums<span class="hljs-comment">[i]</span>+sum&lt;0)&#123;<br>                    dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j+sum]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j+sum+nums<span class="hljs-comment">[i]</span>]</span>;<br>                &#125;else&#123;<br>                    //防止j+sum+nums<span class="hljs-comment">[i]</span>越界，进行前面的判断<br>                    dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j+sum]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j+sum+nums<span class="hljs-comment">[i]</span>]</span>+dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j+sum-nums<span class="hljs-comment">[i]</span>]</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        return dp<span class="hljs-comment">[n-1]</span><span class="hljs-comment">[sum+target]</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>time: O(n^2)</p>]]></content>
    
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无序数组第k大的数</title>
    <link href="/2022/11/17/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0/"/>
    <url>/2022/11/17/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">https://leetcode.cn/problems/kth-largest-element-in-an-array/</a></p><img src="/2022/11/17/%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0/p1.png" class=""><h3 id="方法一：priorityqueue"><a href="#方法一：priorityqueue" class="headerlink" title="方法一：priorityqueue"></a>方法一：priorityqueue</h3><p>Java优先队列的底层是动态数组，数组的扩容会降低性能，可以类似于hashmap，初始化容量提高性能。</p><p>priorityqueue默认小根堆，想要大根堆需重写compare或lambda表达式，</p><p>如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">PriorityQueue&lt;Integer&gt; minQue=<span class="hljs-keyword">new</span> PriorityQueue&lt;Integer&gt;(<span class="hljs-function"><span class="hljs-params">(a,b)</span>-&gt;</span>b-a);<br></code></pre></td></tr></table></figure><p>若是根据类的某一个字段对对象数组进行排序，可用该类实现comparator接口，然后重写compare方法，最后将该类传给priorityqueue的构造函数。</p><p>本题使用priorityqueue：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n=nums.length;<br>        PriorityQueue&lt;Integer&gt; minQue=<span class="hljs-keyword">new</span> PriorityQueue&lt;Integer&gt;(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            minQue.offer(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=k;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">int</span> cur=nums[i];<br>            <span class="hljs-keyword">if</span>(cur&gt;minQue.peek())&#123;<br>                minQue.poll();<br>                minQue.offer(cur);<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> minQue.<span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二：自建堆"><a href="#方法二：自建堆" class="headerlink" title="方法二：自建堆"></a>方法二：自建堆</h3><p>自建一个大根堆，取出的第k个数则是第k大的数。</p><p>建堆的时间复杂度o(n)，删除一次是o(logn)，k次为o(klogn)。</p>]]></content>
    
    
    
    <tags>
      
      <tag>heap</tag>
      
      <tag>priorityqueue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字典树</title>
    <link href="/2022/11/16/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <url>/2022/11/16/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Trie &#123;<br><br>    private Trie[] children;<br>    private boolean isEnd;<br><br>    public Trie() &#123;<br>        <span class="hljs-attribute">children</span>=new Trie[26];<br>        <span class="hljs-attribute">isEnd</span>=<span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    public void insert(String word) &#123;<br>        Trie <span class="hljs-attribute">node</span>=this;<br>        int <span class="hljs-attribute">n</span>=word.length();<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=0;i&lt;n;i++)&#123;<br>            int <span class="hljs-attribute">index</span>=word.charAt(i)-&#x27;a&#x27;;<br>            <span class="hljs-keyword">if</span>(node.children[index]==<span class="hljs-literal">null</span>)&#123;<br>                node.children[index]=new Trie();<br>            &#125;<br>            <span class="hljs-attribute">node</span>=node.children[index];<br>        &#125;<br>        node.<span class="hljs-attribute">isEnd</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    public boolean search(String word) &#123;<br>        int <span class="hljs-attribute">n</span>=word.length();<br>        Trie <span class="hljs-attribute">node</span>=children[word.charAt(0)-<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">node</span>==null) return <span class="hljs-literal">false</span>;<br>        int <span class="hljs-attribute">index</span>=1;<br>        <span class="hljs-keyword">while</span>(index&lt;n&amp;&amp;node!=<span class="hljs-literal">null</span>)&#123;<br>            int <span class="hljs-attribute">child</span>=word.charAt(index)-&#x27;a&#x27;;<br>            <span class="hljs-attribute">node</span>=node.children[child];<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">node</span>==null) return <span class="hljs-literal">false</span>;<br>         <span class="hljs-keyword">if</span>(<span class="hljs-attribute">index</span>==n&amp;&amp;node.isEnd==true) return <span class="hljs-literal">true</span>;<br>         return <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    public boolean startsWith(String prefix) &#123;<br>        int <span class="hljs-attribute">n</span>=prefix.length();<br>        Trie <span class="hljs-attribute">node</span>=children[prefix.charAt(0)-<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">node</span>==null) return <span class="hljs-literal">false</span>;<br>        int <span class="hljs-attribute">index</span>=1;<br>        <span class="hljs-keyword">while</span>(index&lt;n&amp;&amp;node!=<span class="hljs-literal">null</span>)&#123;<br>            int <span class="hljs-attribute">child</span>=prefix.charAt(index)-&#x27;a&#x27;;<br>            <span class="hljs-attribute">node</span>=node.children[child];<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">node</span>==null) return <span class="hljs-literal">false</span>;<br>         <span class="hljs-keyword">if</span>(<span class="hljs-attribute">index</span>==n) return <span class="hljs-literal">true</span>;<br>         return <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>课程表拓扑问题</title>
    <link href="/2022/11/15/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E6%8B%93%E6%89%91%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/15/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E6%8B%93%E6%89%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/course-schedule/">https://leetcode.cn/problems/course-schedule/</a></p><img src="/2022/11/15/%E8%AF%BE%E7%A8%8B%E8%A1%A8%E6%8B%93%E6%89%91%E9%97%AE%E9%A2%98/p1.png" class="" title="图片引用方法一"><h3 id="方法一：dfs"><a href="#方法一：dfs" class="headerlink" title="方法一：dfs"></a>方法一：dfs</h3><p>pre[i]记录第i门课的前驱课程。</p><p>从一个点出发，需用一个状态记录该点正在访问，若子dfs又访问到该点，则冲突。子dfs若找不到自己，则该点不会发生冲突，用一个状态记录该点作为起点不会冲突。还要一个状态记录该点尚未访问，因此一共需要三个状态。</p><p>0表示未访问，1表示正在访问，2表示访问结束。</p><p>在dfs中</p><ul><li><p>访问到状态为1的点，则冲突。</p></li><li><p>访问到状态为2的点，因为该点作为起点不会冲突，因此无需继续访问。</p></li><li><p>访问到状态为0的点，对其所有前驱进行dfs</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br><br>    private <span class="hljs-type">boolean</span> <span class="hljs-keyword">valid</span>=<span class="hljs-keyword">true</span>;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> canFinish(<span class="hljs-type">int</span> numCourses, <span class="hljs-type">int</span>[][] prerequisites) &#123;<br>        <span class="hljs-type">int</span> n=prerequisites.length;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-type">int</span>[] visited=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[numCourses];<br>        Arrays.fill(visited,<span class="hljs-number">0</span>);<br>        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; pre=<span class="hljs-built_in">new</span> ArrayList&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numCourses;i++)&#123;<br>            List&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-keyword">temp</span>=<span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();<br>            pre.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">temp</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            pre.<span class="hljs-keyword">get</span>(prerequisites[i][<span class="hljs-number">0</span>]).<span class="hljs-keyword">add</span>(prerequisites[i][<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numCourses&amp;&amp;<span class="hljs-keyword">valid</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(visited[i]==<span class="hljs-number">0</span>)&#123;<br>                dfs(pre,i,visited);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">valid</span>==<span class="hljs-keyword">false</span>)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">valid</span>;<br>    &#125;<br><br>    private <span class="hljs-type">void</span> dfs(List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; pre,<span class="hljs-type">int</span> <span class="hljs-keyword">start</span>,<span class="hljs-type">int</span>[] visited)&#123;<br>        <span class="hljs-keyword">if</span>(visited[<span class="hljs-keyword">start</span>]==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">valid</span>=<span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(visited[<span class="hljs-keyword">start</span>]==<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        visited[<span class="hljs-keyword">start</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">Integer</span> i:pre.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">start</span>))&#123;<br>            dfs(pre,i,visited);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">valid</span>==<span class="hljs-keyword">false</span>) <span class="hljs-keyword">return</span>;<br>            <br>        &#125;<br>        visited[<span class="hljs-keyword">start</span>]=<span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的栈遍历</title>
    <link href="/2022/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A0%88%E9%81%8D%E5%8E%86/"/>
    <url>/2022/11/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A0%88%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p><strong>关键：在while循环开始时，栈中弹出的元素的左子树已经访问结束</strong></p><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">https://leetcode.cn/problems/binary-tree-inorder-traversal/</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> List&lt;<span class="hljs-type">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;<br>        List&lt;<span class="hljs-type">Integer</span>&gt; ans=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> ans;<br>        Deque&lt;TreeNode&gt; que = <span class="hljs-built_in">new</span> ArrayDeque&lt;&gt;();<br>        que.addLast(root);<br>        root=root.left;<br>        <span class="hljs-keyword">while</span>(root!=<span class="hljs-keyword">null</span>)&#123;<br>            que.<span class="hljs-keyword">add</span>(root);<br>            root=root.left;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>            //弹出的元素的左子树已经访问完毕<br>            TreeNode <span class="hljs-keyword">temp</span>=que.pollLast();<br>            //访问自己<br>            ans.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">temp</span>.val);<br>            //访问右子树<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.right;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>                que.addLast(<span class="hljs-keyword">temp</span>);<br>                <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.left;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p><a href="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/</a></p><p>将二叉树转为先序遍历的链表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> flatten(TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(root.left==<span class="hljs-keyword">null</span>&amp;&amp;root.right==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>        //访问根，根入栈，循环访问左子树，无左，弹出，访问右子树<br>        Deque&lt;TreeNode&gt; que=<span class="hljs-built_in">new</span> ArrayDeque&lt;&gt;();<br>        List&lt;TreeNode&gt; ans=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        TreeNode last=root;<br>        //预处理，以便在<span class="hljs-keyword">while</span>循环开始时左边已经全部访问<br>        que.addLast(root);<br>        ans.<span class="hljs-keyword">add</span>(root);<br>        TreeNode <span class="hljs-keyword">temp</span>=root;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>.left!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.left;<br>            que.addLast(<span class="hljs-keyword">temp</span>);<br>            ans.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">temp</span>);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>            <span class="hljs-keyword">temp</span>=que.pollLast();<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.right;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>                que.addLast(<span class="hljs-keyword">temp</span>);<br>                ans.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">temp</span>);<br>                <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.left;<br>            &#125;<br>        &#125;<br>        root.left=<span class="hljs-keyword">null</span>;<br>        root.right=ans.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>);<br>        TreeNode l,r;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;ans.size()<span class="hljs-number">-1</span>;i++)&#123;<br>            l=ans.<span class="hljs-keyword">get</span>(i);<br>            r=ans.<span class="hljs-keyword">get</span>(i+<span class="hljs-number">1</span>);<br>            l.left=<span class="hljs-keyword">null</span>;<br>            l.right=r;<br>            r.left=<span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">https://leetcode.cn/problems/binary-tree-postorder-traversal/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(root *TreeNode)</span></span> []<span class="hljs-type">int</span> &#123;<br>    ans:=<span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> root==<span class="hljs-literal">nil</span>&#123;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>    last:=root<br>    cur:=root<br>    stack:=<span class="hljs-built_in">make</span>([]*TreeNode,<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> cur!=<span class="hljs-literal">nil</span>&#123;<br>        stack=<span class="hljs-built_in">append</span>(stack,cur)<br>        cur=cur.Left<br>    &#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(stack)&gt;<span class="hljs-number">0</span>&#123;<br>        cur=stack[<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>        <span class="hljs-keyword">if</span> cur.Right==<span class="hljs-literal">nil</span>||cur.Right==last&#123;<br>            ans=<span class="hljs-built_in">append</span>(ans,cur.Val)<br>            <span class="hljs-comment">//如果一个结点有右孩子，一定是后序遍历的上一个出栈</span><br>            stack=stack[:<span class="hljs-built_in">len</span>(stack)<span class="hljs-number">-1</span>]<br>            last=cur<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cur=cur.Right<br>            <span class="hljs-keyword">for</span> cur!=<span class="hljs-literal">nil</span>&#123;<br>                stack=<span class="hljs-built_in">append</span>(stack,cur)<br>                cur=cur.Left<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>binaryTree</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大合法括号数</title>
    <link href="/2022/11/09/%E6%9C%80%E5%A4%A7%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E6%95%B0/"/>
    <url>/2022/11/09/%E6%9C%80%E5%A4%A7%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/longest-valid-parentheses/">https://leetcode.cn/problems/longest-valid-parentheses/</a></p><img src="/2022/11/09/%E6%9C%80%E5%A4%A7%E5%90%88%E6%B3%95%E6%8B%AC%E5%8F%B7%E6%95%B0/test1.png" class="" title="图片引用方法一"><p>使用dp[i]表示以第i个括号作为结尾的最大合法括号数，关键在于合法状态的连接，类似于leetcode801</p><ul><li>以（ 结尾一定不合法，为0</li><li>以 ）结尾，若上一个是（ ，直接与dp[i-2]相连，再加上当前增益2；若上一个是 ），则上一个具有自己的合法括号数dp[i-1]，i-dp[i-1]-1是上一个应该相连的dp下标，并加上当前增益dp[i-1]+2</li></ul><p>Java求数组最大值可用下列函数，本题最优是维护max，每一轮更新</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">Arrays<span class="hljs-selector-class">.stream</span>(dp)<span class="hljs-selector-class">.max</span>()<span class="hljs-selector-class">.getAsInt</span>();<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Solution &#123;<br>    public <span class="hljs-built_in">int</span> longest<span class="hljs-constructor">ValidParentheses(String <span class="hljs-params">s</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> n=s.length<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">1</span>) return <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//dp[i]表示以i结尾最大合法括号数，i-dp[i-1]-1表示上一个暂未合法的字符</span><br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> dp=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-identifier">n</span>]</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>fill(dp,<span class="hljs-number">0</span>);<br>        dp<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(0)</span>==<span class="hljs-character">&#x27;(&#x27;</span>&amp;&amp;s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(1)</span>==<span class="hljs-character">&#x27;)&#x27;</span>)&#123;<br>            dp<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>=<span class="hljs-number">2</span>;<br>            ans=<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>==<span class="hljs-character">&#x27;)&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>-1)</span>==<span class="hljs-character">&#x27;(&#x27;</span>)&#123;<br>                    dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>-<span class="hljs-number">2</span>]</span>+<span class="hljs-number">2</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//上一个非法的括号下标</span><br>                    <span class="hljs-built_in">int</span> l=i-dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>-<span class="hljs-number">1</span>]</span>-<span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">//设为合法，并与之前相连</span><br>                    <span class="hljs-keyword">if</span>((l&gt;=<span class="hljs-number">0</span>)&amp;&amp;(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">l</span>)</span>==<span class="hljs-character">&#x27;(&#x27;</span>))&#123;<br>                        <span class="hljs-keyword">if</span>(l-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span>)&#123;<br>                            dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=dp<span class="hljs-literal">[<span class="hljs-identifier">l</span>-<span class="hljs-number">1</span>]</span>+i-l+<span class="hljs-number">1</span>;<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=i-l+<span class="hljs-number">1</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            ans=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>max(ans,dp<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卡特兰数</title>
    <link href="/2022/11/07/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
    <url>/2022/11/07/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>最短桥</title>
    <link href="/2022/10/25/%E6%9C%80%E7%9F%AD%E6%A1%A5/"/>
    <url>/2022/10/25/%E6%9C%80%E7%9F%AD%E6%A1%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/shortest-bridge/">https://leetcode.cn/problems/shortest-bridge/</a></p><img src="/2022/10/25/%E6%9C%80%E7%9F%AD%E6%A1%A5/p1.png" class="" title="图片引用方法一"><p>广度优先，访问过的数设为-1，每次扩散一圈，若找到1则返回，找到0则设为-1。</p><p>使用队列的广度优先，每次访问完一圈才能进行第二圈而不是出列入列交叉进行，此时需要一个辅助队列记录。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> shortestBridge(<span class="hljs-type">int</span>[][] grid) &#123;<br>        <span class="hljs-type">int</span> n=grid.length;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        Deque&lt;<span class="hljs-type">int</span>[]&gt; que=<span class="hljs-built_in">new</span> ArrayDeque&lt;&gt;();<br>        <span class="hljs-type">boolean</span> flag=<span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)&#123;<br>                <span class="hljs-keyword">if</span>(grid[i][j]==<span class="hljs-number">1</span>)&#123;<br>                    dfs(grid,i,j,n,que);<br>                    flag=<span class="hljs-keyword">true</span>;<br>                    break;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                break;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>            //bfs<br>            Deque&lt;<span class="hljs-type">int</span>[]&gt; <span class="hljs-keyword">temp</span>=<span class="hljs-built_in">new</span> ArrayDeque&lt;&gt;();<br>            <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>                <span class="hljs-keyword">temp</span>.<span class="hljs-keyword">add</span>(que.pollLast());<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!<span class="hljs-keyword">temp</span>.isEmpty())&#123;<br>                <span class="hljs-type">int</span>[] <span class="hljs-type">point</span>=<span class="hljs-keyword">temp</span>.pollLast();<br>                <span class="hljs-type">int</span> i=<span class="hljs-type">point</span>[<span class="hljs-number">0</span>];<br>                <span class="hljs-type">int</span> j=<span class="hljs-type">point</span>[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(grid[i<span class="hljs-number">-1</span>][j]==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">return</span> ans;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(grid[i<span class="hljs-number">-1</span>][j]==<span class="hljs-number">0</span>)&#123;<br>                        grid[i<span class="hljs-number">-1</span>][j]=<span class="hljs-number">-1</span>;<br>                        que.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;i<span class="hljs-number">-1</span>,j&#125;);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(i&lt;n<span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(grid[i+<span class="hljs-number">1</span>][j]==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">return</span> ans;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(grid[i+<span class="hljs-number">1</span>][j]==<span class="hljs-number">0</span>)&#123;<br>                        grid[i+<span class="hljs-number">1</span>][j]=<span class="hljs-number">-1</span>;<br>                        que.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;i+<span class="hljs-number">1</span>,j&#125;);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(j&lt;n<span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(grid[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">return</span> ans;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(grid[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)&#123;<br>                        grid[i][j+<span class="hljs-number">1</span>]=<span class="hljs-number">-1</span>;<br>                        que.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;i,j+<span class="hljs-number">1</span>&#125;);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(grid[i][j<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">return</span> ans;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(grid[i][j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)&#123;<br>                        grid[i][j<span class="hljs-number">-1</span>]=<span class="hljs-number">-1</span>;<br>                        que.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;i,j<span class="hljs-number">-1</span>&#125;);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;    <br><br>    //将此连通图中所有元素变为<span class="hljs-number">-1</span><br>    private <span class="hljs-type">void</span> dfs(<span class="hljs-type">int</span>[][] grid,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> n,Deque&lt;<span class="hljs-type">int</span>[]&gt; que)&#123;<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>||i&gt;=n||j&lt;<span class="hljs-number">0</span>||j&gt;=n) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(grid[i][j]==<span class="hljs-number">1</span>)&#123;<br>            que.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[]&#123;i,j&#125;);<br>            grid[i][j]=<span class="hljs-number">-1</span>;<br>            dfs(grid,i,j+<span class="hljs-number">1</span>,n,que);<br>            dfs(grid,i,j<span class="hljs-number">-1</span>,n,que);<br>            dfs(grid,i+<span class="hljs-number">1</span>,j,n,que);<br>            dfs(grid,i<span class="hljs-number">-1</span>,j,n,que);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>dfs</tag>
      
      <tag>bfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>规划兼职工作-动态规划</title>
    <link href="/2022/10/22/%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2022/10/22/%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/maximum-profit-in-job-scheduling/">https://leetcode.cn/problems/maximum-profit-in-job-scheduling/</a></p><img src="/2022/10/22/%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/p1.png" class="" title="图片引用方法一"><img src="/2022/10/22/%E8%A7%84%E5%88%92%E5%85%BC%E8%81%8C%E5%B7%A5%E4%BD%9C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/p2.png" class="" title="图片引用方法一"><p>先根据endTime对三元组排序，使用dp[i]表示使用了前i组得到的最大利润，状态转移方程如下：</p><ul><li><p>如果第i个的startTime大于等于第i-1个的endTime，则</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span>=dp<span class="hljs-comment">[i-1]</span>+profit<span class="hljs-comment">[i]</span><br></code></pre></td></tr></table></figure></li><li><p>否则，从右到左找到第一个endTime小于等于当前startTime的数的下标，如果找不到返回-1</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//找到第k个满足</span><br>dp<span class="hljs-selector-attr">[i]</span>=Math<span class="hljs-selector-class">.max</span>(dp<span class="hljs-selector-attr">[i-1]</span>,dp<span class="hljs-selector-attr">[k]</span>+profit<span class="hljs-selector-attr">[i]</span>)<br><span class="hljs-comment">//找不到</span><br>dp<span class="hljs-selector-attr">[i]</span>=Math<span class="hljs-selector-class">.max</span>(dp<span class="hljs-selector-attr">[i-1]</span>,profit<span class="hljs-selector-attr">[i]</span>)<br></code></pre></td></tr></table></figure></li></ul><p>完整代码如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> jobScheduling(<span class="hljs-built_in">int</span>[] startTime, <span class="hljs-built_in">int</span>[] endTime, <span class="hljs-built_in">int</span>[] profit) &#123;<br>        <span class="hljs-built_in">int</span> n=profit.length;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> profit[<span class="hljs-number">0</span>];<br>        <span class="hljs-built_in">int</span>[][] jobs=new <span class="hljs-built_in">int</span>[n][];<br>        <span class="hljs-comment">//jobs可认为是三元组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            jobs[i]=new <span class="hljs-built_in">int</span>[]&#123;startTime[i],endTime[i],profit[i]&#125;;<br>        &#125;<br>        <span class="hljs-comment">//对三元组的排序</span><br>        Arrays.sort(jobs,(a,b)-&gt;(a[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>]));<br>        <span class="hljs-comment">//对endTime排序，方便二分查找</span><br>        Arrays.sort(endTime);<br>        <span class="hljs-built_in">int</span>[] dp=new <span class="hljs-built_in">int</span>[n];<br>        dp[<span class="hljs-number">0</span>]=jobs[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-comment">//不冲突，可加</span><br>            <span class="hljs-keyword">if</span>(jobs[i][<span class="hljs-number">0</span>]&gt;=jobs[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>])&#123;<br>                dp[i]=dp[i<span class="hljs-number">-1</span>]+jobs[i][<span class="hljs-number">2</span>];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//找到上一个endTime与当前startTime不冲突的下标</span><br>                <span class="hljs-built_in">int</span> k=bs(endTime,<span class="hljs-number">0</span>,i<span class="hljs-number">-1</span>,jobs[i][<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span>(k==<span class="hljs-number">-1</span>)&#123;<br>                    dp[i]=Math.max(dp[i<span class="hljs-number">-1</span>],jobs[i][<span class="hljs-number">2</span>]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//此步最优是此步不加或前一个不冲突的加上此步</span><br>                    dp[i]=Math.max(dp[i<span class="hljs-number">-1</span>],dp[k]+jobs[i][<span class="hljs-number">2</span>]);  <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n<span class="hljs-number">-1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">//找到nums中从r到l第一个小于等于target的数的下标，若没有则返回-1</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> bs(<span class="hljs-built_in">int</span>[] nums,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r,<span class="hljs-built_in">int</span> target)&#123;<br>        <span class="hljs-keyword">while</span>(l+<span class="hljs-number">1</span>&lt;r)&#123;<br>            <span class="hljs-built_in">int</span> mid=(r+l)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;target)&#123;<br>                r=mid<span class="hljs-number">-1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l=mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[r]&lt;=target)&#123;<br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[l]&lt;=target)&#123;<br>            <span class="hljs-keyword">return</span> l;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">//暴力解法对本题来说似乎更优</span><br>        <span class="hljs-comment">// for(int i=r;i&gt;=0;i--)&#123;</span><br>        <span class="hljs-comment">//     if(nums[i]&lt;=target)&#123;</span><br>        <span class="hljs-comment">//         return i;</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">// return -1;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java重写sort排序</title>
    <link href="/2022/10/22/java%E9%87%8D%E5%86%99sort%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/10/22/java%E9%87%8D%E5%86%99sort%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>将a[i]与b[i]绑定，然后根据b数组的排序结果对a数组进行排序；</p><p>先以二维数组nums的形式保存二元组a[i]-b[i]，nums[i][0]&#x3D;a[i],nums[i][1]&#x3D;b[i];</p><p>然后重写Arrays.sort的comparator方法。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">int</span> n=a.length;<br>      <span class="hljs-keyword">int</span>[][] nums=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][];<br>      <span class="hljs-comment">//nums可认为是二元组</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>          nums[i]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;a[i],b[i]&#125;;<br>      &#125;<br>      <span class="hljs-comment">//对三元组的排序</span><br>      Arrays.<span class="hljs-keyword">sort</span>(jobs,(a,b)-&gt;(a[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>]));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二分查找</title>
    <link href="/2022/10/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2022/10/22/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<p>对单增数组，返回下标在l到r之间，从右到左第一个小于等于target数的下标</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">//找到nums中从r到l第一个小于等于target的数的下标，若没有则返回-1</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> r,<span class="hljs-keyword">int</span> <span class="hljs-keyword">target</span>)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(l+<span class="hljs-number">1</span>&lt;r)&#123;<br>            <span class="hljs-keyword">int</span> mid=(r+l)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;<span class="hljs-keyword">target</span>)&#123;<br>                r=mid<span class="hljs-number">-1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l=mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[r]&lt;=<span class="hljs-keyword">target</span>)&#123;<br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[l]&lt;=<span class="hljs-keyword">target</span>)&#123;<br>            <span class="hljs-keyword">return</span> l;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>找到从左到右第一个等于target的数组下标的左边</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findL</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> <span class="hljs-keyword">target</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r=nums.length<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(l+<span class="hljs-number">1</span>&lt;r)&#123;<br>        <span class="hljs-keyword">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid]&lt;<span class="hljs-keyword">target</span>)&#123;<br>            l=mid;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            r=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(nums[l]==<span class="hljs-keyword">target</span>)&#123;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><p>找到从右到左第一个等于target的数组下标的右边</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findR</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> <span class="hljs-keyword">target</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> l=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r=nums.length<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(l+<span class="hljs-number">1</span>&lt;r)&#123;<br>        <span class="hljs-keyword">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(nums[mid]&gt;<span class="hljs-keyword">target</span>)&#123;<br>            r=mid;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(nums[r]==<span class="hljs-keyword">target</span>)&#123;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>股票跨度-递归or单调栈</title>
    <link href="/2022/10/21/%E8%82%A1%E7%A5%A8%E8%B7%A8%E5%BA%A6%E9%80%92%E5%BD%92or%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    <url>/2022/10/21/%E8%82%A1%E7%A5%A8%E8%B7%A8%E5%BA%A6%E9%80%92%E5%BD%92or%E5%8D%95%E8%B0%83%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/online-stock-span/">https://leetcode.cn/problems/online-stock-span/</a></p><img src="/2022/10/21/%E8%82%A1%E7%A5%A8%E8%B7%A8%E5%BA%A6%E9%80%92%E5%BD%92or%E5%8D%95%E8%B0%83%E6%A0%88/p1.png" class="" title="图片引用方法一"><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><p>预处理：用dp数组保存连续递增的次数，用nums数组保存price</p><p>递归：对当前下标，如果大于等于前一个数，要找到大于等于前一个数的前一个数，dp[index-1]为前一个数所拥有的连续递增次数，故index-dp[index-1]为大于等于前一个数的前一个数的下标</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockSpanner</span> &#123;<br><br>    <span class="hljs-built_in">int</span>[] dp;<br>    <span class="hljs-built_in">int</span>[] nums;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">index</span>=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> StockSpanner() &#123;<br>        dp=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">10001</span>];<br>        nums=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">10001</span>];<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">next</span>(<span class="hljs-built_in">int</span> price) &#123;<br>        nums[<span class="hljs-keyword">index</span>]=price;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">index</span>==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">index</span>++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(nums[<span class="hljs-keyword">index</span>]&gt;=nums[<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>])&#123;<br>            dp[<span class="hljs-keyword">index</span>]=dp[<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            dp[<span class="hljs-keyword">index</span>]=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">index</span>++;<br>        <span class="hljs-keyword">return</span> recur(<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>,price);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> recur(<span class="hljs-built_in">int</span> <span class="hljs-keyword">index</span>,<span class="hljs-built_in">int</span> price)&#123;<br>        <span class="hljs-comment">//第一个数</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">index</span>==<span class="hljs-number">0</span>&amp;&amp;price&gt;=nums[<span class="hljs-number">0</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">index</span>==<span class="hljs-number">0</span>&amp;&amp;price&lt;nums[<span class="hljs-number">0</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(price&lt;nums[<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">//大于前一个数且大于lastIndex</span><br>        <span class="hljs-keyword">if</span>(price&gt;=nums[<span class="hljs-keyword">index</span>-dp[<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>]])&#123;<br>            <span class="hljs-keyword">return</span> dp[<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>]+recur(<span class="hljs-keyword">index</span>-dp[<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>],price);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-keyword">index</span><span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your StockSpanner object will be instantiated and called as such:</span><br><span class="hljs-comment"> * StockSpanner obj = new StockSpanner();</span><br><span class="hljs-comment"> * int param_1 = obj.next(price);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="方法二：单调栈"><a href="#方法二：单调栈" class="headerlink" title="方法二：单调栈"></a>方法二：单调栈</h3><p>栈中维护从左到右单调递减的元素及其下标，关键是栈中第一个元素是-1和MAX_VALUE，这样后面如果有数最大，能比到MAX_VALUE，则返回其下标+1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockSpanner</span> &#123;<br><br>    Deque&lt;<span class="hljs-type">int</span>[]&gt; stack;<br>    <span class="hljs-type">int</span> index;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StockSpanner</span><span class="hljs-params">()</span> </span>&#123;<br>        stack=<span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>        stack.<span class="hljs-built_in">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">-1</span>,Integer.MAX_VALUE&#125;);<br>        index=<span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> </span>&#123;<br>        index++;<br>        <span class="hljs-keyword">while</span>(price&gt;=stack.<span class="hljs-built_in">peek</span>()[<span class="hljs-number">1</span>])&#123;<br>            stack.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-type">int</span> res=index-stack.<span class="hljs-built_in">peek</span>()[<span class="hljs-number">0</span>];<br>        stack.<span class="hljs-built_in">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;index,price&#125;);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第k个语法符号递归</title>
    <link href="/2022/10/20/%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7%E9%80%92%E5%BD%92/"/>
    <url>/2022/10/20/%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/k-th-symbol-in-grammar/">https://leetcode.cn/problems/k-th-symbol-in-grammar/</a></p><img src="/2022/10/20/%E7%AC%ACk%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7%E9%80%92%E5%BD%92/p1.png" class="" title="图片引用方法一"><p>找规律</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>n=<span class="hljs-number">1</span><br><span class="hljs-symbol">01 </span>n=<span class="hljs-number">2</span><br><span class="hljs-symbol">0110 </span>n=<span class="hljs-number">3</span><br><span class="hljs-symbol">01101001 </span>n=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>n每增大1，前一半和n-1相同，后一半相反。故可以使用递归。</p><ul><li>如果k为1，返回0，退出条件</li><li>如果k超出n对应的size的一半，与n-1的k-size&#x2F;2相反</li><li>如果小于等于一半，与n-1的第k位相同</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-built_in">int</span> kth<span class="hljs-constructor">Grammar(<span class="hljs-params">int</span> <span class="hljs-params">n</span>, <span class="hljs-params">int</span> <span class="hljs-params">k</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>) return <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(k&gt;(<span class="hljs-number">1</span>&lt;&lt;(n-<span class="hljs-number">2</span>)))&#123;<br>        return <span class="hljs-number">1</span>-kth<span class="hljs-constructor">Grammar(<span class="hljs-params">n</span>-1,<span class="hljs-params">k</span>-(1&lt;&lt;(<span class="hljs-params">n</span>-2)</span>));<br>    &#125;<br>    return kth<span class="hljs-constructor">Grammar(<span class="hljs-params">n</span>-1,<span class="hljs-params">k</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二部图问题1</title>
    <link href="/2022/10/16/%E4%BA%8C%E9%83%A8%E5%9B%BE%E9%97%AE%E9%A2%981/"/>
    <url>/2022/10/16/%E4%BA%8C%E9%83%A8%E5%9B%BE%E9%97%AE%E9%A2%981/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/possible-bipartition/">https://leetcode.cn/problems/possible-bipartition/</a></p><img src="/2022/10/16/%E4%BA%8C%E9%83%A8%E5%9B%BE%E9%97%AE%E9%A2%981/test1.png" class="" title="图片引用方法一"><p>染色处理，没访问过的结点染为0；需要访问时，若无要求，默认染为1；若相邻结点染过色，则染上不冲突的颜色。</p><p>使用图对dislikes的处理，使用如下邻接表图结构：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">List</span><span class="hljs-operator">&lt;</span><span class="hljs-built_in">Integer</span><span class="hljs-operator">&gt;</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> <span class="hljs-variable">graph</span><br></code></pre></td></tr></table></figure><p>二部图分类问题，可以用深度优先，对每一个出现过的结点，dfs其所有相邻的结点。</p><p>为防止图不是连通图，在dfs外部使用循环dfs，记录访问过的结点。如果该结点没有被访问且dfs失败，则返回false。</p><p>dfs中，对当前结点，使用邻接表访问所有相邻结点。若相邻结点以访问过且颜色与当前结点相同则冲突，返回false；若相邻结点没访问过并且dfs不成功，则返回false。所有相邻结点都访问成功返回true。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> possibleBipartition(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[][] dislikes) &#123;<br>        List&lt;<span class="hljs-type">Integer</span>&gt;[] graph = <span class="hljs-built_in">new</span> List[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            graph[i] = <span class="hljs-built_in">new</span> LinkedList&lt;<span class="hljs-type">Integer</span>&gt;();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;dislikes.length;i++)&#123;<br>            graph[dislikes[i][<span class="hljs-number">0</span>]].<span class="hljs-keyword">add</span>(dislikes[i][<span class="hljs-number">1</span>]);<br>            graph[dislikes[i][<span class="hljs-number">1</span>]].<span class="hljs-keyword">add</span>(dislikes[i][<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-type">int</span>[] color=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">1</span>];<br>        Arrays.fill(color,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(color[i]==<span class="hljs-number">0</span>&amp;&amp;!dfs(color,graph,i,<span class="hljs-number">1</span>))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    private <span class="hljs-type">boolean</span> dfs(<span class="hljs-type">int</span>[] color,List&lt;<span class="hljs-type">Integer</span>&gt;[] graph,<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>,<span class="hljs-type">int</span> curColor)&#123;<br>        color[<span class="hljs-keyword">index</span>]=curColor;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> next:graph[<span class="hljs-keyword">index</span>])&#123;<br>            <span class="hljs-keyword">if</span>(color[next]==curColor)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(color[next]==<span class="hljs-number">0</span>&amp;&amp;!dfs(color,graph,next,<span class="hljs-number">3</span>-curColor))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>组合总数2</title>
    <link href="/2022/10/13/%E7%BB%84%E5%90%88%E6%80%BB%E6%95%B02/"/>
    <url>/2022/10/13/%E7%BB%84%E5%90%88%E6%80%BB%E6%95%B02/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/combination-sum-ii/">https://leetcode.cn/problems/combination-sum-ii/</a></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Given a collection of candidate numbers (candidates) and a <span class="hljs-keyword">target</span> <span class="hljs-keyword">number</span> (<span class="hljs-keyword">target</span>), find <span class="hljs-built_in">all</span> unique combinations <span class="hljs-keyword">in</span> candidates <span class="hljs-keyword">where</span> the candidate numbers <span class="hljs-built_in">sum</span> to <span class="hljs-keyword">target</span>.<br><br>Each <span class="hljs-keyword">number</span> <span class="hljs-keyword">in</span> candidates may <span class="hljs-keyword">only</span> be used once <span class="hljs-keyword">in</span> the combination.<br><br>Note: The solution set must not contain duplicate combinations.<br></code></pre></td></tr></table></figure><p>此题应使用回溯法，但加入ans时注意set不能相同，一种方法是使用集合，集合中的元素为数组，此方法在集合中元素过多时性能极差，超时。</p><p>另一种方法是回溯中使用特定的顺序搜索，先对数组进行排序，然后在回溯的for循环中，对相同的多个元素，作为回溯的起点只开始一次。关键代码如下：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-keyword">index</span>;i&lt;nums.length;i=<span class="hljs-keyword">next</span>[i])&#123;<br>    ans.add(nums[i]);<br>    <span class="hljs-keyword">reverse</span>(res,ans,nums,i+<span class="hljs-number">1</span>,<span class="hljs-keyword">sum</span>+nums[i],target,<span class="hljs-keyword">next</span>);<br>    ans.remove(ans.size()<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中next数组定义如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Arrays.<span class="hljs-keyword">sort</span>(candidates);<br><span class="hljs-keyword">int</span> n = candidates.length;<br><span class="hljs-keyword">int</span>[] <span class="hljs-keyword">next</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br><span class="hljs-keyword">next</span>[n-<span class="hljs-number">1</span>]=n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n-<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>    <span class="hljs-keyword">if</span>(candidates[i]==candidates[i+<span class="hljs-number">1</span>])&#123;<br>        <span class="hljs-keyword">next</span>[i]=<span class="hljs-keyword">next</span>[i+<span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">next</span>[i]=i+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确性可以通过画出搜索树来理解，对于下面的用例：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[1,1,1,1,1]</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>回溯搜索树在每次加入nums[i]后，只会产生一个分支i+1。此方法也可以解三数之和，但三数之和可用哈希表降低时间复杂度，此法超时。</p><p>此题代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; combinationSum2(<span class="hljs-type">int</span>[] candidates, <span class="hljs-type">int</span> target) &#123;<br>        Arrays.sort(candidates);<br>        <span class="hljs-type">int</span> n = candidates.length;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br>        next[n<span class="hljs-number">-1</span>]=n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i<span class="hljs-comment">--)&#123;</span><br>            <span class="hljs-keyword">if</span>(candidates[i]==candidates[i+<span class="hljs-number">1</span>])&#123;<br>                next[i]=next[i+<span class="hljs-number">1</span>];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                next[i]=i+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res = <span class="hljs-built_in">new</span> LinkedList&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt;();<br>        List&lt;<span class="hljs-type">Integer</span>&gt; ans = <span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>        reverse(res,ans,candidates,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,target,next);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    private <span class="hljs-type">void</span> reverse(List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res,List&lt;<span class="hljs-type">Integer</span>&gt; ans,<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>,<br>    <span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> target,<span class="hljs-type">int</span>[] next)&#123;<br>        <span class="hljs-keyword">if</span>(sum==target)&#123;<br>            res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> LinkedList(ans));<br>        &#125;<br>        <span class="hljs-keyword">if</span>(sum&gt;target)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-keyword">index</span>;i&lt;nums.length;i=next[i])&#123;<br>            ans.<span class="hljs-keyword">add</span>(nums[i]);<br>            reverse(res,ans,nums,i+<span class="hljs-number">1</span>,sum+nums[i],target,next);<br>            ans.remove(ans.size()<span class="hljs-number">-1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种思路是用哈希表记录每一个元素加入的次数…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java的HashMap</title>
    <link href="/2022/10/12/java%E7%9A%84HashMap/"/>
    <url>/2022/10/12/java%E7%9A%84HashMap/</url>
    
    <content type="html"><![CDATA[<ul><li><p>Java的HashMap在计算下标时，用的不是取模运算（%），而是与（&amp;）。因为位运算比取模运算的速度更快。如果哈希数组的长度为n，待哈希数与n-1进行与运算，得到的数在0到n-1之间。如果n为2的幂数，则n-1每一位都是1，在扩大容量时，使用移位运算在与运算时，数组的每一位都能得到利用。否则，有的位为0，与运算该位的结果永远为0，造成数组中一些位置一直得不到填充。<em><strong>故哈希表的长度为2的幂数</strong></em>。</p></li><li><p>扩容。超过loadFactor时扩容，默认0.75。hashmap默认数组大小16，当占用超过12个位置时扩容一倍。HashMap的resize十分消耗性能，若预先能估计大小，预设size能优化性能</p></li><li><p>线程不安全。hashmap使用modCount与expectedModCount版本号机制判断是否发生并发错误。对hashmap的修改会增加modCount值，操作前将modCount赋给expectedModCount，操作时判断二者是否相等。若并发线程修改了hashmap，则不等，此时报出ConcurrentModificationException。</p><p><em><strong>ConcurrentHashMap线程安全</strong></em></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>全排列</title>
    <link href="/2022/10/12/%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/2022/10/12/%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/permutations/">https://leetcode.cn/problems/permutations/</a></p><p>力扣46题全排列回溯法</p><p>回溯法属于深度优先，回溯函数首先要写出退出条件，也就是深度达到最深时。</p><p>需要一个布尔数组保存已经搜索过的结点。</p><p>每一步操作，在调用递归函数后，都要恢复操作前的状态，这个恢复过程称为回溯。</p><p>本题对于ans的值，每一个reverse函数都会将其恢复，故最终的ans仍为空，每一次reverse递归调用的前后，ans的内容都相同。</p><p>Java函数传递引用类型时，传递的是指针，指针的指向不能修改，但指针指向地址的值可以修改。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; permute(<span class="hljs-type">int</span>[] nums) &#123;<br>        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res = <span class="hljs-built_in">new</span> LinkedList&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt;();<br>        List&lt;<span class="hljs-type">Integer</span>&gt; ans = <span class="hljs-built_in">new</span> LinkedList&lt;<span class="hljs-type">Integer</span>&gt;();<br>        <span class="hljs-type">int</span> n = nums.length;<br>        <span class="hljs-type">boolean</span>[] used = <span class="hljs-built_in">new</span> <span class="hljs-type">boolean</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            used[i]=<span class="hljs-keyword">false</span>;<br>        &#125;<br>        reverse(res,ans,<span class="hljs-number">0</span>,used,n,nums);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    private <span class="hljs-type">void</span> reverse(List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res,List&lt;<span class="hljs-type">Integer</span>&gt; ans,<span class="hljs-type">int</span> depth,<span class="hljs-type">boolean</span>[] used,<span class="hljs-type">int</span> length,<span class="hljs-type">int</span>[] nums)&#123;<br>        <span class="hljs-keyword">if</span>(depth==length)&#123;<br>            res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> LinkedList(ans));//不<span class="hljs-built_in">new</span>则传的是ans的地址，最终为空<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(!used[i])&#123;<br>                ans.<span class="hljs-keyword">add</span>(nums[i]);<br>                used[i]=<span class="hljs-keyword">true</span>;<br>                reverse(res,ans,depth+<span class="hljs-number">1</span>,used,length,nums);<br>                ans.remove(ans.size()<span class="hljs-number">-1</span>);<br>                used[i]=<span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>力扣801最小交换</title>
    <link href="/2022/10/10/%E5%8A%9B%E6%89%A3801%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2/"/>
    <url>/2022/10/10/%E5%8A%9B%E6%89%A3801%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="801-Minimum-Swaps-To-Make-Sequences-Increasing"><a href="#801-Minimum-Swaps-To-Make-Sequences-Increasing" class="headerlink" title="801. Minimum Swaps To Make Sequences Increasing"></a><a href="https://leetcode.cn/problems/minimum-swaps-to-make-sequences-increasing/">801. Minimum Swaps To Make Sequences Increasing</a></h4><p>本题若上下数组同时从后缩短，也具有最优解，每一步都只有两种选择，交换或者不交换。可以考虑用</p><p>dp[n][2]来做记忆化存储，dp[i][0]表示第i次不做交换的前i次交换次数，dp[i][1]表示第i次做交换的前i次交换次数。</p><p>状态转移方程的条件为nums1的当前位置a与前一个位置b，以及nums2的当前位置c与前一个位置d。</p><p>如果b&gt;a&amp;&amp;d&gt;c，此时不需要交换，但如果此时也满足b&gt;c&amp;&amp;d&gt;a，此时交换也合法。当前来看不交换为最优，但此题当前位置的最优解不一定能得到全局最优解，故此步交换的情况也应考虑到。设以下布尔值方便条件判断。</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">boolean case1 = (nums1<span class="hljs-comment">[i]</span>&gt;nums1<span class="hljs-comment">[i-1]</span>)&amp;&amp;(nums2<span class="hljs-comment">[i]</span>&gt;nums2<span class="hljs-comment">[i-1]</span>);<br>boolean case2 = (nums1<span class="hljs-comment">[i]</span>&gt;nums2<span class="hljs-comment">[i-1]</span>)&amp;&amp;(nums2<span class="hljs-comment">[i]</span>&gt;nums1<span class="hljs-comment">[i-1]</span>);<br></code></pre></td></tr></table></figure><p>状态转移方程如下：</p><ol><li><p>若case1&amp;&amp;(!case2)，当前不交换，则前一步也不用不交换；当前交换，则前一步也得交换</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>+1;<br></code></pre></td></tr></table></figure></li><li><p>若(!case1)&amp;&amp;case2，当前交换，则前一步不用交换；当前不交换，则前一步需要交换</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>+1;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>;<br></code></pre></td></tr></table></figure></li><li><p>若两种条件都满足，可换也可不换，选取最小值</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=Math.min(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>);<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=Math.min(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>)+1;<br></code></pre></td></tr></table></figure></li></ol><p><em><strong>总结：状态转移方程的关键在于合法状态的前后连接</strong></em></p><p>动态规划代码如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs inform7">class Solution &#123;<br>    public int minSwap(int<span class="hljs-comment">[]</span> nums1, int<span class="hljs-comment">[]</span> nums2) &#123;<br>        int n = nums1.length;<br>        int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> dp = new int<span class="hljs-comment">[n]</span><span class="hljs-comment">[2]</span>;<br>        dp<span class="hljs-comment">[0]</span><span class="hljs-comment">[0]</span>=0;<br>        dp<span class="hljs-comment">[0]</span><span class="hljs-comment">[1]</span>=1;<br>        for(int i=1;i&lt;n;i++)&#123;<br>            boolean case1 = (nums1<span class="hljs-comment">[i]</span>&gt;nums1<span class="hljs-comment">[i-1]</span>)&amp;&amp;(nums2<span class="hljs-comment">[i]</span>&gt;nums2<span class="hljs-comment">[i-1]</span>);<br>            boolean case2 = (nums1<span class="hljs-comment">[i]</span>&gt;nums2<span class="hljs-comment">[i-1]</span>)&amp;&amp;(nums2<span class="hljs-comment">[i]</span>&gt;nums1<span class="hljs-comment">[i-1]</span>);<br>            if(case1&amp;&amp;(!case2))&#123;<br>                dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>;<br>                dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>+1;<br>            &#125;<br>            if((!case1)&amp;&amp;case2)&#123;<br>                dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>+1;<br>                dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>;<br>            &#125;<br>            if(case1&amp;&amp;case2)&#123;<br>                dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=Math.min(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>);<br>                dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=Math.min(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>)+1;<br>            &#125;<br>        &#125;<br>        return Math.min(dp<span class="hljs-comment">[n-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[n-1]</span><span class="hljs-comment">[1]</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本题每一次循环用到的四个dp值具有前后衔接性，可使用4个变量作为滚动数组来优化。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Solution &#123;<br>    public int minSwap(int[] nums1, int[] nums2) &#123;<br>        int n = nums1.length;<br>        int <span class="hljs-attribute">a</span>=0;<br>        int <span class="hljs-attribute">b</span>=1;<br>        <span class="hljs-keyword">for</span>(int <span class="hljs-attribute">i</span>=1;i&lt;n;i++)&#123;<br>            int <span class="hljs-attribute">c</span>=0,d=0;<br>            boolean case1 = (nums1[i]&gt;nums1[i-1])&amp;&amp;(nums2[i]&gt;nums2[i-1]);<br>            boolean case2 = (nums1[i]&gt;nums2[i-1])&amp;&amp;(nums2[i]&gt;nums1[i-1]);<br>            <span class="hljs-keyword">if</span>(case1&amp;&amp;(!case2))&#123;<br>                <span class="hljs-attribute">c</span>=a;<br>                <span class="hljs-attribute">d</span>=b+1;<br>            &#125;<br>            <span class="hljs-keyword">if</span>((!case1)&amp;&amp;case2)&#123;<br>                <span class="hljs-attribute">d</span>=a+1;<br>                <span class="hljs-attribute">c</span>=b;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(case1&amp;&amp;case2)&#123;<br>                <span class="hljs-attribute">c</span>=Math.min(a,b);<br>                <span class="hljs-attribute">d</span>=Math.min(a,b)+1;<br>            &#125;<br>            <span class="hljs-attribute">a</span>=c;<br>            <span class="hljs-attribute">b</span>=d;<br>        &#125;<br>        return Math.min(a,b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>田忌赛马</title>
    <link href="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/"/>
    <url>/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<p>力扣870，田忌赛马问题，此题可用贪心算法或动态规划解决。</p><h3 id="方法一：贪心算法"><a href="#方法一：贪心算法" class="headerlink" title="方法一：贪心算法"></a>方法一：贪心算法</h3><p>贪心算法又有两种贪心策略，一种是从快到慢的贪心，一种是从慢到快的贪心</p><h4 id="从快到慢"><a href="#从快到慢" class="headerlink" title="从快到慢"></a>从快到慢</h4><p>贪心策略如下</p><img src="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/test1.png" class="" title="图片引用方法一"><p>此题需要保存排序前的元素在数组中的下标，有两种方法，一种是使用哈希表存储元素-下标，考虑到元素存在重复，因此使用队列作为哈希表的value</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span>[] advantageCount(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        Map&lt;<span class="hljs-type">Integer</span>, Deque&lt;<span class="hljs-type">Integer</span>&gt;&gt; map = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums2.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(!map.containsKey(nums2[i]))&#123;<br>                map.put(nums2[i], <span class="hljs-built_in">new</span> LinkedList());<br>            &#125;<br>            map.<span class="hljs-keyword">get</span>(nums2[i]).<span class="hljs-keyword">add</span>(i);<br>        &#125;<br><br>        Arrays.sort(nums1);<br>        Arrays.sort(nums2);<br><br>        <span class="hljs-type">int</span> n = nums1.length;<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br>        <span class="hljs-type">int</span> head = <span class="hljs-number">0</span>; // 指向ret的头<br>        <span class="hljs-type">int</span> tail = n - <span class="hljs-number">1</span>; // 指向ret的尾<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; // nums2的下标<br>        <span class="hljs-keyword">while</span>(head &lt; n)&#123;<br>            <span class="hljs-keyword">if</span>(nums1[head] &gt; nums2[i])&#123;<br>                <span class="hljs-type">Integer</span> <span class="hljs-keyword">index</span> = map.<span class="hljs-keyword">get</span>(nums2[i]).poll();<br>                ret[<span class="hljs-keyword">index</span>] = nums1[head++];<br>                i++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">Integer</span> <span class="hljs-keyword">index</span> = map.<span class="hljs-keyword">get</span>(nums2[tail]).poll();<br>            ret[<span class="hljs-keyword">index</span>] = nums1[head++];<br>            tail<span class="hljs-comment">--;</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种方法是使用下标数组，排序的compare使用值的大小，而排序的结果作用在下标数组上，使得下标数组的第一个位置记录最大元素的下标，以此类推。中间要重写sort函数的comparator接口，可以使用lambda表达式</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs inform7">class Solution &#123;<br>    public static int<span class="hljs-comment">[]</span> advantageCount(int<span class="hljs-comment">[]</span> nums1, int<span class="hljs-comment">[]</span> nums2) &#123;<br>        int n=nums1.length;<br>        Integer<span class="hljs-comment">[]</span> index2 = new Integer<span class="hljs-comment">[n]</span>;<br>        for(int i=0;i&lt;n;i++)&#123;<br>            index2<span class="hljs-comment">[i]</span>=i;<br>        &#125;<br>        //对nums2从大到小排序，下标数组的第一个位置保存nums2最大的数的下标<br>        Arrays.sort(nums1);<br>        for(int i=0;i&lt;n/2;i++)&#123;<br>            int temp=nums1<span class="hljs-comment">[i]</span>;<br>            nums1<span class="hljs-comment">[i]</span>=nums1<span class="hljs-comment">[n-1-i]</span>;<br>            nums1<span class="hljs-comment">[n-1-i]</span>=temp;<br>        &#125;<br>        Arrays.sort(index2,new Comparator&lt;Integer&gt;() &#123;<br>            @Override<br>            public int compare(Integer i, Integer j) &#123;<br>                return nums2<span class="hljs-comment">[j]</span> - nums2<span class="hljs-comment">[i]</span>;<br>            &#125;<br>        &#125;);<br>        //若使用lambda表达式则如下<br>        //Arrays.sort(index2,(i,j)-&gt;&#123;nums2<span class="hljs-comment">[j]</span>-nums2<span class="hljs-comment">[i]</span>&#125;);<br>        int<span class="hljs-comment">[]</span> ans = new int<span class="hljs-comment">[n]</span>;<br>        int l1=0,r1=n-1;<br>        int r2=n-1;<br>        for(int i=0;i&lt;n;i++)&#123;<br>            //nums1最大的数大于nums2最大的数，则贪心此步最优<br>            if(nums1<span class="hljs-comment">[l1]</span>&gt;nums2<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>)&#123;<br>                //nums1最大数的下标<br>                ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[l1]</span>;<br>                l1++;<br>            &#125;else if(nums1<span class="hljs-comment">[l1]</span>&lt;nums2<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>)&#123;<br>                //小于则用nums1最小数与nums2最大数比较<br>                ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[r1]</span>;<br>                r1--;<br>            &#125;else&#123;<br>                //最大数相等，比较最小数，若最小数大，则比较，否则，拿最小数比<br>                if(nums1<span class="hljs-comment">[r1]</span>&gt;nums2<span class="hljs-comment">[index2<span class="hljs-comment">[r2]</span>]</span>)&#123;<br>                    ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[l1]</span>;<br>                    l1++;<br>                &#125;else&#123;<br>                    ans<span class="hljs-comment">[index2<span class="hljs-comment">[i]</span>]</span>=nums1<span class="hljs-comment">[r1]</span>;<br>                    r1--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="从慢到快"><a href="#从慢到快" class="headerlink" title="从慢到快"></a>从慢到快</h4><p>贪心策略如下</p><ul><li>田忌的最慢马比齐王的最慢马快，则继续往后</li><li>田忌的最慢马比齐王的最慢马慢，用田忌的最慢马与齐王的最快马比较</li></ul><h3 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h3><img src="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/test2.png" class="" title="图片引用方法一"><img src="/2022/10/09/%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/test3.png" class="" title="图片引用方法一"><p><em><strong>状态转移方程</strong></em></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">f<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[j]</span>=<span class="hljs-built_in">max</span>(f<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[j]</span>+<span class="hljs-built_in">score</span>(i-j,j),f<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[j-1]</span>+<span class="hljs-built_in">score</span>(n-j+<span class="hljs-number">1</span>,j))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/10/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/10/05/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>a</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/05/hello-world/"/>
    <url>/2022/10/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
